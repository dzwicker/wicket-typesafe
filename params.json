{"name":"Wicket-typesafe","tagline":"Wicket typesafe helps to generate wicket-ids in a type safe way.","body":"[![Build Status](https://travis-ci.org/dzwicker/wicket-typesafe.png)](https://travis-ci.org/dzwicker/wicket-typesafe)\r\n\r\nwicket-typesafe\r\n===============\r\n\r\nWicket typesafe helps to generate wicket-ids in a type safe way. So it helps to solve the refactoring problem when using PropertyModel or CompoundPropertyModel.\r\n\r\n#### Features\r\nCurrently it can be used to construct refactor safe property expressions.\r\n\r\nFor example, using wicket-typesafe module the following code that depends on strings:\r\n\r\n    Person person = new Person();\r\n    IModel<Person> personModel=Model.of(person);\r\n    setDefaultModel(personModel);\r\n    add(new Label(\"street.name\"));\r\n\r\ncan be replaced with the following:\r\n\r\n    Person person = new Person();\r\n    IModel<Person> personModel=Model.of(person);\r\n    setDefaultModel(personModel);\r\n    add(new Label(id(of(Person.class).getStreet().getName())));\r\n\r\nalthough the code is a more verbose then its string alternative it will generate\r\na compile time error should any properties change instead of failing at runtime\r\nlike its more concise string alternative.\r\n\r\nThe module can generate ids and supports:\r\n* Not final Classes\r\n* Interfaces\r\n* All getter return types even final ones\r\n* of(XXX.class) can be stored in a static way\r\n* id(XXXX) can be stored in a static way\r\n\r\n\r\n#### Installation\r\nAdd the following dependencies into your pom.xml\r\n\r\n\t<dependency>\r\n    <groupId>com.github.dzwicker.wicket</groupId>\r\n    <artifactId>wicket-typesafe</artifactId>\r\n\t\t<version>${typesafe.version}</version>\r\n\t</dependency>\r\n\r\n\r\n#### Building MetaGen from source\r\nJust use maven:\r\n    mvn install\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}